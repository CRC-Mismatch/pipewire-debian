From 1669b25e09c340eb840d241c554c7e9626a85989 Mon Sep 17 00:00:00 2001
From: Antoine Soulier <asoulier@google.com>
Date: Wed, 15 Feb 2023 16:03:12 -0800
Subject: [PATCH] fix: Remove use of deprecated `int` numpy attribute

---
 test/sns.py  | 6 +++---
 test/spec.py | 6 +++---
 test/tns.py  | 8 ++++----
 3 files changed, 10 insertions(+), 10 deletions(-)

diff --git a/test/sns.py b/test/sns.py
index 7447c99..8740aab 100644
--- a/test/sns.py
+++ b/test/sns.py
@@ -345,7 +345,7 @@ def __init__(self, dt, sr):
 
     def deenum_mpvq(self, index, ls, npulses, n):
 
-        y = np.zeros(n, dtype=np.int)
+        y = np.zeros(n, dtype=np.intc)
         pos = 0
 
         for i in range(len(y)-1, -1, -1):
@@ -374,14 +374,14 @@ def unquantize(self):
 
         ## 3.7.4.2.1-2  SNS VQ Decoding
 
-        y = np.empty(16, dtype=np.int)
+        y = np.empty(16, dtype=np.intc)
 
         if self.shape == 0:
             y[:10] = self.deenum_mpvq(self.idx_a, self.ls_a, 10, 10)
             y[10:] = self.deenum_mpvq(self.idx_b, self.ls_b,  1,  6)
         elif self.shape == 1:
             y[:10] = self.deenum_mpvq(self.idx_a, self.ls_a, 10, 10)
-            y[10:] = np.zeros(6, dtype=np.int)
+            y[10:] = np.zeros(6, dtype=np.intc)
         elif self.shape == 2:
             y = self.deenum_mpvq(self.idx_a, self.ls_a, 8, 16)
         elif self.shape == 3:
diff --git a/test/spec.py b/test/spec.py
index b741e5c..898c9a1 100644
--- a/test/spec.py
+++ b/test/spec.py
@@ -444,7 +444,7 @@ def decode(self, bits, bw, nbytes):
         x = np.zeros(T.NE[self.dt][self.sr])
         rate = 512 if nbytes >  20 * (1 + self.sr) else 0
 
-        levs = np.zeros(len(x), dtype=np.int)
+        levs = np.zeros(len(x), dtype=np.intc)
         c = 0
 
         for n in range(0, self.lastnz, 2):
@@ -540,7 +540,7 @@ def decode(self, bits, bw, nbytes):
 
         ### Set residual and noise
 
-        nf_seed = sum(abs(x.astype(np.int)) * range(len(x)))
+        nf_seed = sum(abs(x.astype(np.intc)) * range(len(x)))
 
         zero_frame = (self.lastnz <= 2 and x[0] == 0 and x[1] == 0
                       and self.g_idx <= 0 and f_nf >= 7)
@@ -766,7 +766,7 @@ def check_appendix_c(dt):
             'nfilters' : C.NUM_TNS_FILTERS[dt][i],
             'lpc_weighting' : [ True, True ],
             'rc_order' : [ C.RC_ORDER[dt][i][0], 0 ],
-            'rc' : [ C.RC_I_1[dt][i] - 8, np.zeros(8, dtype = np.int) ]
+            'rc' : [ C.RC_I_1[dt][i] - 8, np.zeros(8, dtype = np.intc) ]
         }
 
         (x, xq, side) = lc3.spec_analyze(dt, sr, C.NBYTES[dt],
diff --git a/test/tns.py b/test/tns.py
index 65e1c03..d537590 100644
--- a/test/tns.py
+++ b/test/tns.py
@@ -187,8 +187,8 @@ def run(self, x, bw, nn_flag, nbytes):
 
         self.nfilters = len(Tns.SUB_LIM[self.dt][bw])
         self.lpc_weighting = nbytes * 8 < 48 * T.DT_MS[self.dt]
-        self.rc_order = np.zeros(2, dtype=np.int)
-        self.rc = np.zeros((2, 8), dtype=np.int)
+        self.rc_order = np.zeros(2, dtype=np.intc)
+        self.rc = np.zeros((2, 8), dtype=np.intc)
 
         for f in range(self.nfilters):
 
@@ -259,8 +259,8 @@ def load(self, b, bw, nbytes):
 
         self.nfilters = len(Tns.SUB_LIM[self.dt][bw])
         self.lpc_weighting = nbytes * 8 < 48 * T.DT_MS[self.dt]
-        self.rc_order = np.zeros(2, dtype=np.int)
-        self.rc = 8 * np.ones((2, 8), dtype=np.int)
+        self.rc_order = np.zeros(2, dtype=np.intc)
+        self.rc = 8 * np.ones((2, 8), dtype=np.intc)
 
         for f in range(self.nfilters):
 
