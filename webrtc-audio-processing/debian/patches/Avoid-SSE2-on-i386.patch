Description: Avoid SSE2 usage on i386 without properly checks
Author: Nicholas Guriev <guriev-ns@ya.ru>
Bug-telegram: https://github.com/desktop-app/tg_owt/pull/45
Origin: https://github.com/desktop-app/tg_owt/commit/5fcaae1
Last-Update: 2022-08-03
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/webrtc/modules/audio_processing/aec3/adaptive_fir_filter.cc
+++ b/webrtc/modules/audio_processing/aec3/adaptive_fir_filter.cc
@@ -88,7 +88,7 @@
 
 #if defined(WEBRTC_ARCH_X86_FAMILY)
 // Computes and stores the frequency response of the filter.
-void ComputeFrequencyResponse_Sse2(
+RTC_TARGET_SSE2 void ComputeFrequencyResponse_Sse2(
     size_t num_partitions,
     const std::vector<std::vector<FftData>>& H,
     std::vector<std::array<float, kFftLengthBy2Plus1>>* H2) {
@@ -210,10 +210,11 @@
 
 #if defined(WEBRTC_ARCH_X86_FAMILY)
 // Adapts the filter partitions. (SSE2 variant)
-void AdaptPartitions_Sse2(const RenderBuffer& render_buffer,
-                          const FftData& G,
-                          size_t num_partitions,
-                          std::vector<std::vector<FftData>>* H) {
+RTC_TARGET_SSE2 void AdaptPartitions_Sse2(
+    const RenderBuffer& render_buffer,
+    const FftData& G,
+    size_t num_partitions,
+    std::vector<std::vector<FftData>>* H) {
   rtc::ArrayView<const std::vector<FftData>> render_buffer_data =
       render_buffer.GetFftBuffer();
   const size_t num_render_channels = render_buffer_data[0].size();
@@ -375,10 +376,11 @@
 
 #if defined(WEBRTC_ARCH_X86_FAMILY)
 // Produces the filter output (SSE2 variant).
-void ApplyFilter_Sse2(const RenderBuffer& render_buffer,
-                      size_t num_partitions,
-                      const std::vector<std::vector<FftData>>& H,
-                      FftData* S) {
+RTC_TARGET_SSE2 void ApplyFilter_Sse2(
+    const RenderBuffer& render_buffer,
+    size_t num_partitions,
+    const std::vector<std::vector<FftData>>& H,
+    FftData* S) {
   // const RenderBuffer& render_buffer,
   //                     rtc::ArrayView<const FftData> H,
   //                     FftData* S) {
--- a/webrtc/modules/audio_processing/aec3/adaptive_fir_filter_erl.cc
+++ b/webrtc/modules/audio_processing/aec3/adaptive_fir_filter_erl.cc
@@ -57,7 +57,7 @@
 #if defined(WEBRTC_ARCH_X86_FAMILY)
 // Computes and stores the echo return loss estimate of the filter, which is the
 // sum of the partition frequency responses.
-void ErlComputer_SSE2(
+RTC_TARGET_SSE2 void ErlComputer_SSE2(
     const std::vector<std::array<float, kFftLengthBy2Plus1>>& H2,
     rtc::ArrayView<float> erl) {
   std::fill(erl.begin(), erl.end(), 0.f);
--- a/webrtc/modules/audio_processing/aec3/fft_data.h
+++ b/webrtc/modules/audio_processing/aec3/fft_data.h
@@ -48,7 +48,7 @@
                 rtc::ArrayView<float> power_spectrum) const {
     RTC_DCHECK_EQ(kFftLengthBy2Plus1, power_spectrum.size());
     switch (optimization) {
-#if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(WEBRTC_ARCH_X86_FAMILY) && defined(WEBRTC_HAS_SSE2)
       case Aec3Optimization::kSse2: {
         constexpr int kNumFourBinBands = kFftLengthBy2 / 4;
         constexpr int kLimit = kNumFourBinBands * 4;
--- a/webrtc/modules/audio_processing/aec3/matched_filter.cc
+++ b/webrtc/modules/audio_processing/aec3/matched_filter.cc
@@ -144,14 +144,14 @@
 
 #if defined(WEBRTC_ARCH_X86_FAMILY)
 
-void MatchedFilterCore_SSE2(size_t x_start_index,
-                            float x2_sum_threshold,
-                            float smoothing,
-                            rtc::ArrayView<const float> x,
-                            rtc::ArrayView<const float> y,
-                            rtc::ArrayView<float> h,
-                            bool* filters_updated,
-                            float* error_sum) {
+RTC_TARGET_SSE2 void MatchedFilterCore_SSE2(size_t x_start_index,
+                                            float x2_sum_threshold,
+                                            float smoothing,
+                                            rtc::ArrayView<const float> x,
+                                            rtc::ArrayView<const float> y,
+                                            rtc::ArrayView<float> h,
+                                            bool* filters_updated,
+                                            float* error_sum) {
   const int h_size = static_cast<int>(h.size());
   const int x_size = static_cast<int>(x.size());
   RTC_DCHECK_EQ(0, h_size % 4);
--- a/webrtc/modules/audio_processing/aec3/vector_math.h
+++ b/webrtc/modules/audio_processing/aec3/vector_math.h
@@ -43,7 +43,7 @@
   void SqrtAVX2(rtc::ArrayView<float> x);
   void Sqrt(rtc::ArrayView<float> x) {
     switch (optimization_) {
-#if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(WEBRTC_ARCH_X86_FAMILY) && defined(WEBRTC_HAS_SSE2)
       case Aec3Optimization::kSse2: {
         const int x_size = static_cast<int>(x.size());
         const int vector_limit = x_size >> 2;
@@ -123,7 +123,7 @@
     RTC_DCHECK_EQ(z.size(), x.size());
     RTC_DCHECK_EQ(z.size(), y.size());
     switch (optimization_) {
-#if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(WEBRTC_ARCH_X86_FAMILY) && defined(WEBRTC_HAS_SSE2)
       case Aec3Optimization::kSse2: {
         const int x_size = static_cast<int>(x.size());
         const int vector_limit = x_size >> 2;
@@ -173,7 +173,7 @@
   void Accumulate(rtc::ArrayView<const float> x, rtc::ArrayView<float> z) {
     RTC_DCHECK_EQ(z.size(), x.size());
     switch (optimization_) {
-#if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(WEBRTC_ARCH_X86_FAMILY) && defined(WEBRTC_HAS_SSE2)
       case Aec3Optimization::kSse2: {
         const int x_size = static_cast<int>(x.size());
         const int vector_limit = x_size >> 2;
--- a/webrtc/rtc_base/system/inline.h
+++ b/webrtc/rtc_base/system/inline.h
@@ -28,4 +28,10 @@
 
 #endif
 
+#if defined(__GNUC__) && !defined(__SSE2__)
+#define RTC_TARGET_SSE2 __attribute__((__target__("sse2")))
+#else
+#define RTC_TARGET_SSE2
+#endif
+
 #endif  // RTC_BASE_SYSTEM_INLINE_H_
